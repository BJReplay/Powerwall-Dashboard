[{"apiVersion":"influxdata.com/v2alpha1","kind":"Task","metadata":{"name":"loving-hertz-ff7001"},"spec":{"every":"1m","name":"tesla_energy.instant_power","query":"import \"math\"\nimport \"date\"\n\n\n\ndata =\n    from(bucket: \"raw_tesla_energy\")\n        //for historical generation change start here, otherwise use -3m for previous minute final total\n        |> range(start: date.truncate(t: -3m, unit: 1m), stop: date.truncate(t: now(), unit: 1m))\n        |> filter(fn: (r) => r[\"_measurement\"] == \"http\")\n        |> filter(\n            fn: (r) =>\n                r._field == \"load_instant_power\" or r._field == \"solar_instant_power\" or r._field\n                    ==\n                    \"battery_instant_power\" or r._field == \"site_instant_power\" or r._field\n                    ==\n                    \"percentage\" or r._field == \"grid_status\" or r[\"_field\"]\n                    ==\n                    \"backup_reserve_percent\",\n        )\n        |> map(fn: (r) => ({r with _measurement: \"instant_power\"}))\n        |> drop(columns: [\"host\", \"month\", \"url\", \"year\"])\n\nhome =\n    data\n        |> filter(fn: (r) => r[\"_field\"] == \"load_instant_power\")\n        |> map(fn: (r) => ({r with _field: \"home\"}))\n        |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n\nsolar =\n    data\n        |> filter(fn: (r) => r[\"_field\"] == \"solar_instant_power\")\n        |> map(fn: (r) => ({r with _field: \"solar\"}))\n        |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n\ngrid =\n    data\n        |> filter(fn: (r) => r[\"_field\"] == \"site_instant_power\")\n        |> map(fn: (r) => ({r with _field: \"grid\"}))\n        |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n\nfromgrid =\n    data\n        |> filter(fn: (r) => r[\"_field\"] == \"site_instant_power\")\n        |> map(fn: (r) => ({r with _value: if r._value > 0 then math.abs(x: r._value) else 0.0}))\n        |> map(fn: (r) => ({r with _field: \"from_grid\"}))\n        |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n\ntogrid =\n    data\n        |> filter(fn: (r) => r[\"_field\"] == \"site_instant_power\")\n        |> map(fn: (r) => ({r with _value: if r._value < 0 then math.abs(x: r._value) else 0.0}))\n        |> map(fn: (r) => ({r with _field: \"to_grid\"}))\n        |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n\npowerwall =\n    data\n        |> filter(fn: (r) => r[\"_field\"] == \"battery_instant_power\")\n        |> map(fn: (r) => ({r with _field: \"powerwall\"}))\n        |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n\nfrompowerwall =\n    data\n        |> filter(fn: (r) => r[\"_field\"] == \"battery_instant_power\")\n        |> map(fn: (r) => ({r with _value: if r._value > 0 then math.abs(x: r._value) else 0.0}))\n        |> map(fn: (r) => ({r with _field: \"from_powerwall\"}))\n        |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n\ntopowerwall =\n    data\n        |> filter(fn: (r) => r[\"_field\"] == \"battery_instant_power\")\n        |> map(fn: (r) => ({r with _value: if r._value < 0 then math.abs(x: r._value) else 0.0}))\n        |> map(fn: (r) => ({r with _field: \"to_powerwall\"}))\n        |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n\npercentage =\n    data\n        |> filter(fn: (r) => r[\"_field\"] =~ /percent/)\n        |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n\ngridstatus =\n    data\n        |> filter(fn: (r) => r[\"_field\"] == \"grid_status\")\n        |> aggregateWindow(every: 1m, fn: min, createEmpty: false)\n\nunion(\n    tables: [\n        home,\n        solar,\n        grid,\n        togrid,\n        fromgrid,\n        powerwall,\n        topowerwall,\n        frompowerwall,\n        percentage,\n        gridstatus,\n    ],\n)\n    |> drop(columns: [\"_start\", \"_stop\"])\n    |> to(bucket: \"tesla_energy\")"}}]